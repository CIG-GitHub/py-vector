"""
| OR across two vectors element by element
& AND across two vectors element by element
^ XOR across two vectors element by element

>> left shift
<< right shift
"""

"""
Thoughts:

#row-major vs column-major
Natively, python nested lists are row-major. Consider:
	a = 
	[[1, 0, 9, 4],
	 [3, 3, 1, 2],
	 [1, 1, 0, 3]]

Visually, this is a 3x4 matrix (3 rows, and 4 columns). In row-major convenstion
Row, column access follows matrix index notation natively, namely A_ij = a[i-1][j-1].
For example:
	a[0] = [1, 0, 9, 4]
	a[0][2] = 9

However, the most natural way to represent large datasets is (in most cases) columns.
Consider either a large CSV or "large" SQL table. Convention dictates that you
use many newlines instead of a giant row of data for each variable and tall tables
over wide tables for CSV and SQL respectively.

Additionally, consider the memory layout when many columns form a table e.g. the
output of a basic SQL SELECT query. First, assuming different input data types,
row-major will storage will produce a memory footprint like (int, str, float, 
int,...). Second, one and two column operations such as mean, stdev, covariance,
t-test, etc. will prefer that elements of a given column are adjacent in memory.
There are obviously exceptions to this, but generally storing columns with 
"a lot" of data will result in better performance than storing as rows.

Next, consider practical questions of access and looping. Suppose we chose to
represent tables as a collection of columns:
	t = Table(name, birthday, age)

It *feels* more natural, now, to perform operations such as
	for row in t:... # row-by-row iteration
	t[t.age > 21] # filtering (masking)
	t[3] # grab the 4th row

Taken together, this leads us to a paradigm where memory layout is different than
index layout. We recover several important behaviors that map well to real-world
applications:
	1. Matrix indexing uses "linear-algebra" paradigm (but 0-based - we're not savages)
	2. Filtering, masking, indexing, sorting etc. is done at the "outermost" index level
	3. Looping loops over rows: "for row in reader: ..."; "for row in output: ..." etc.


"""